{"version":3,"sources":["Components/UserInfo/ChangePassWord/ChangePassword.js","api/orderApi.js","actions/orderAction.js"],"names":["connect","state","userInfo","UserInfo","dispatch","fetchUserInfo","user","actFetchUser","props","useState","message","setMessage","stateReadonly","setStateReadonly","passwordNew","setPasswordNew","hiddenButton","setHiddenButton","console","log","style","width","className","display","justifyContent","row","sm","col","htmlFor","maxLength","type","id","name","placeholder","onChange","e","authApi","confirmPassword","customerId","password","target","value","then","res","color","readOnly","length","onClick","accountId","decode","localStorage","getItem","sub","updateAccount","toast","success","catch","err","error","hidden","orderApi","createOrder","data","api","post","url","orders","rs","getUserOrder","get","cancelOrder","status","put","PaypalCheckout","actFetchOrder","order","types"],"mappings":"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","file":"static/js/14.bc2f9135.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { actFetchOrder } from \"./../../../actions/orderAction\";\r\nimport { Link } from \"react-router-dom\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport orderApi from \"./../../../api/orderApi\";\r\nimport SidebarMenu from \"./../Menu/Sidebar/SidebarMenu\";\r\nimport { actFetchUser } from './../../../actions/loginAction';\r\nimport {\r\n\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CForm,\r\n  CFormGroup,\r\n  CInput,\r\n  CLabel,\r\n} from \"@coreui/react\";\r\nimport authApi from './../../../api/authApi';\r\nimport decode from \"jwt-decode\";\r\n\r\nconst ChangePassword = (props) => {\r\n  const {userInfo} = props;\r\n  const [message,setMessage] =useState();\r\n  const [stateReadonly,setStateReadonly]=useState(true);\r\n  const [passwordNew,setPasswordNew]=useState(\"\");\r\n  const [hiddenButton,setHiddenButton]=useState(true);\r\n  // comfirm old password\r\n  const confirmPassword=(e)=>{\r\n    authApi.confirmPassword(userInfo.customerId,{password:e.target.value})\r\n      .then(res=>{\r\n        if(!res){\r\n          setMessage(\"Password cũ không đúng!\");\r\n          setStateReadonly(true);\r\n          setHiddenButton(true);\r\n        }else{\r\n          setMessage(\"\");\r\n          setStateReadonly(false);\r\n        }\r\n      });  \r\n  };\r\n  // set new password\r\n  const handlePassword=(e)=>{\r\n    if(e.target.value!==\"\" && e.target.value.length>=8){\r\n      setHiddenButton(false);\r\n      setPasswordNew(e.target.value);\r\n    }else{\r\n      setHiddenButton(true);\r\n      setPasswordNew(\"\");\r\n    }\r\n\r\n  };\r\n  // change password\r\n  const changePassword =()=>{\r\n    var accountId = decode(localStorage.getItem(\"usertoken\")).sub[3];\r\n    authApi.updateAccount(accountId,{password:passwordNew})\r\n    .then(res=>{\r\n      toast.success(\"Đổi mật khẩu thành công !\")\r\n    })\r\n    .catch(err=>\r\n      {\r\n        toast.error(\"Đổi mật khẩu thất bại vui lòng kiểm tra lại !\")\r\n      })\r\n  };\r\n\r\n  console.log(userInfo)\r\n  return (\r\n    <CCard style={{width: \"90%\"}}>\r\n        <CCardHeader>\r\n          <h5>Đổi mật khẩu</h5>\r\n        </CCardHeader>\r\n\r\n        <CCardBody>\r\n          <CForm className=\"form-horizontal\">\r\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              <div className=\"phase1 \">\r\n                <CFormGroup row>\r\n                  <CLabel sm=\"5\" col htmlFor=\"input-normal\">\r\n                    Mật khẩu cũ:{\" \"}\r\n                  </CLabel>\r\n                  <CCol sm=\"6\">\r\n                    <CInput\r\n                      style={{ width: \"250px\" }}\r\n                      maxLength={30}\r\n                      type=\"password\"\r\n                      id=\"input-normal\"\r\n                      name=\"input-normal\"\r\n                      className=\"input-lg\"\r\n                      placeholder=\"Mật khẩu cũ\"\r\n                      onChange={confirmPassword}\r\n                    />\r\n                     <span style={{color: \"red\" }}>{message}</span>\r\n                  </CCol>\r\n                 \r\n                </CFormGroup>\r\n\r\n                <CFormGroup row>\r\n                  <CLabel sm=\"5\" col htmlFor=\"input-normal\">\r\n                    Mật khẩu mới:{\" \"}\r\n                  </CLabel>\r\n                  <CCol sm=\"6\">\r\n                    <CInput\r\n                      style={{ width: \"250px\" }}\r\n                      maxLength={30}\r\n                      type=\"password\"\r\n                      id=\"input-normal\"\r\n                      name=\"input-normal\"\r\n                      className=\"input-lg\"\r\n                      placeholder=\"Mật khẩu mới\"\r\n                      readOnly={stateReadonly}\r\n                      onChange={handlePassword}\r\n                    />\r\n                  </CCol>\r\n                </CFormGroup>\r\n              </div>\r\n            </div>\r\n          </CForm>\r\n        </CCardBody>\r\n        <CButton type=\"button\" color=\"warning\" onClick={changePassword} hidden={hiddenButton}>\r\n          Đổi mật khẩu\r\n        </CButton>\r\n      </CCard>\r\n\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userInfo: state.UserInfo,\r\n  };\r\n};\r\n\r\nconst mapDispatchToPro = (dispatch) => {\r\n  return {\r\n    fetchUserInfo: (user) => {\r\n      dispatch(actFetchUser(user));\r\n    },\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToPro) (ChangePassword);\r\n\r\n","import api from \"./api\";\n\nconst createOrder = (data) =>api.post(api.url.orders,data).then((rs) => rs.data);\nconst getUserOrder = (id) => api.get(api.url.orders+\"?customerId=\"+ id).then(res => res.data );\nconst cancelOrder = (id,status) => api.put(api.url.orders+'confirmOrder'+'/'+id,status).then(res => res.data);\nconst PaypalCheckout= (id) => api.get(api.url.orders+'checkout'+'/'+id).then(res => res.data);\n\nconst orderApi={\n    createOrder,getUserOrder,cancelOrder,PaypalCheckout\n}\nexport default orderApi;","import axios from 'axios'\nimport * as types from './types'\n\n\nexport const actFetchOrder=(order)=>{\n\treturn {\n\t\ttype:types.GET_USER_ORDER,\n\t\torder//payload:order\n\t}\n}"],"sourceRoot":""}