{"version":3,"sources":["store/reducers/productReducer.js","store/reducers/cartReducer.js","store/reducers/categoryReducer.js","store/reducers/orderReducer.js","store/reducers/userReducer.js","store/reducers/authReducer.js","store/reducers/getProName.js","store/reducers/brandReducer.js","store/reducers/favoriteReducer.js","store/index.js","actions/types.js","App.js","index.js"],"names":["initialState","productReducer","state","action","type","types","products","cartReducer","productIncart","cates","orderReducer","order","userReducer","info","isLoggedIn","localStorage","getItem","token","cusID","authReducer","setItem","jwt_decode","sub","removeItem","name","getProName","proname","brandReducer","brands","favoriteReducer","favorites","myReducer","combineReducers","ProductList","basketState","basketReducer","CategoryList","categoryReducer","CartList","OrderList","UserInfo","AuthToken","ProName","BrandList","FavoriteList","store","createStore","GET_PRODUCT_BASKET","GET_PRODUCT","PRODUCT_NAME","GET_CATEGORY","GET_USER_ORDER","GET_USER_INFO","GET_USER_TOKEN","LOG_OUT","GET_BRAND","GET_FAVORITE","TheLayout","React","lazy","loading","className","now","Date","getTime","setupTime","hours","clear","App","Suspense","fallback","path","render","props","Component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.4a598d91.chunk.js","sourcesContent":["import * as types from \"../../actions/types\";\n\nvar initialState = [];\n\nvar productReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.GET_PRODUCT:\n      state = action.products;\n      return [...state];\n    // case GET_PRODUCT_ID:\n    //   return {\n    //     ...state,\n    //     product: {\n    //       productId: action.productByID.productId,\n    //       name: action.productByID.name,\n    //       price: action.productByID.price,\n    //       image: action.productByID.image,\n    //       sex: action.productByID.sex,\n    //       description: action.productByID.description,\n    //       colorDTOs: action.colorById,\n    //     },\n    //   };\n\n    default:\n      return [...state];\n  }\n};\n\nexport default productReducer;\n","import * as types from \"../../actions/types\";\r\n\r\nconst initialState = [];\r\n\r\nvar cartReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.GET_PRODUCT_BASKET:\r\n      state = action.productIncart;\r\n      return [...state];\r\n    default:\r\n      return [...state];\r\n  }\r\n};\r\nexport default cartReducer;\r\n  ","import * as types from \"../../actions/types\";\n\nconst initialState={\n  cates:[]\n};\n\nvar productReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.GET_CATEGORY:\n      return{\n        ...state,\n        cates:action.cates\n      }\n    default:\n      return {...state};\n  }\n};\n\nexport default productReducer;\n","import * as types from \"../../actions/types\";\n\nvar initialState = [];\n\nvar orderReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.GET_USER_ORDER:\n      state = action.order;\n      return [...state];\n    default:\n      return [...state];\n  }\n};\n\nexport default orderReducer;\n","import * as types from \"../../actions/types\";\n\nconst initialState = {};\n\n\nvar userReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.GET_USER_INFO:\n      state = action.info;\n      return state;\n    default:\n      return state;\n      \n  }\n};\nexport default userReducer;\n  ","import * as types from \"../../actions/types\";\r\nimport jwt_decode from \"jwt-decode\";\r\nconst initialState = {\r\n  isLoggedIn: (localStorage.getItem(\"isLoggedIn\")===\"true\")?true:false || false, \r\n  token: localStorage.getItem(\"usertoken\"),\r\n  cusID: localStorage.getItem(\"cusID\") || \"\",\r\n  // customerName: JSON.parse(localStorage.getItem(\"customerName\")) || {},\r\n  // cartsList:localStorage.getItem(\"cartsList\") || []?\r\n};\r\n\r\nvar authReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.GET_USER_TOKEN:\r\n      localStorage.setItem(\"usertoken\", action.token);\r\n      localStorage.setItem(\"isLoggedIn\", true);\r\n      localStorage.setItem(\"cusID\",action.cusID);\r\n      // localStorage.setItem(\"customerName\", jwt_decode(action.token).sub[0]);\r\n     \r\n      return {\r\n        ...state,\r\n        token: action.token,\r\n        isLoggedIn: true,\r\n        cusID: jwt_decode(action.token).sub[1],\r\n        // customerName: jwt_decode(action.token).sub[0],\r\n        \r\n      };\r\n    case types.LOG_OUT:\r\n       localStorage.removeItem(\"usertoken\");\r\n       localStorage.setItem(\"isLoggedIn\", \"false\");\r\n       localStorage.removeItem(\"cusID\");\r\n      // localStorage.removeItem(\"customerName\");\r\n\r\n      return {\r\n        ...state,\r\n        isLoggedIn: false,\r\n        token: null,\r\n         cusID: \"\",\r\n        // customerName: {},\r\n      };\r\n\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\nexport default authReducer;\r\n","import * as types from \"../../actions/types\";\n\nvar initialState = {name:\"\"};\n\n\nvar getProName = (state = initialState, action) => {\n    switch (action.type) {\n      case types.PRODUCT_NAME:\n        return{\n          ...state,\n          name: action.proname\n        }\n      default:\n        return {...state};\n    }\n  };\n  \n  export default getProName;\n  ","import * as types from \"../../actions/types\";\r\n\r\nconst initialState=[];\r\n\r\nvar brandReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.GET_BRAND:\r\n      state = action.brands;\r\n      return [...state];\r\n    default:\r\n      return {...state};\r\n  }\r\n};\r\n\r\nexport default brandReducer;\r\n","import * as types from \"../../actions/types\";\r\nconst initialState = [];\r\n\r\nvar favoriteReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.GET_FAVORITE:\r\n      state=action.favorites;\r\n      return [...state];\r\n   \r\n    default:\r\n      return [...state];\r\n  }\r\n};\r\nexport default favoriteReducer;\r\n","import {createStore, combineReducers } from \"redux\";\r\nimport productReducer from '../store/reducers/productReducer';\r\nimport basketReducer from './reducers/cartReducer'\r\nimport categoryReducer from '../store/reducers/categoryReducer'\r\nimport cartReducer from '../store/reducers/cartReducer'\r\nimport orderReducer from './reducers/orderReducer';\r\nimport userReducer from './reducers/userReducer';\r\nimport authReducer from './reducers/authReducer';\r\nimport getProName from './reducers/getProName';\r\nimport brandReducer from './reducers/brandReducer';\r\nimport favoriteReducer from \"./reducers/favoriteReducer\";\r\n\r\n\r\n\r\nconst myReducer =combineReducers({\r\n    ProductList:productReducer,\r\n    basketState: basketReducer,\r\n    CategoryList: categoryReducer,\r\n    CartList: cartReducer,\r\n    OrderList: orderReducer,\r\n    UserInfo: userReducer,\r\n    AuthToken: authReducer,\r\n    ProName: getProName,\r\n    BrandList: brandReducer,\r\n    FavoriteList: favoriteReducer,\r\n\r\n})\r\nconst store=createStore(myReducer);\r\nexport default store;\r\n","\r\n\r\nexport const ADD_PRODUCT_BASKET = 'ADD_PRODUCT_BASKET';\r\nexport const GET_PRODUCT_BASKET = 'GET_PRODUCT_BASKET';\r\nexport const INCREASE_QUANTITY = 'INCREASE_QUANTITY';\r\nexport const DECREASE_QUANTITY = 'DECREASE_QUANTITY';\r\nexport const CLEAR_PRODUCT = 'CLEAR_PRODUCT';\r\n// product\r\nexport const GET_PRODUCT ='GET_PRODUCT'\r\nexport const GET_PRODUCT_ID ='GET_PRODUCT_ID'\r\nexport const PRODUCT_NAME = 'PRODUCT_NAME'\r\n//category\r\nexport const GET_CATEGORY='GET_CATEGORY';\r\n\r\n//order\r\nexport const GET_USER_ORDER = 'GET_USER_ORDER';\r\n//user Info\r\n\r\nexport const GET_USER_INFO = 'GET_USER_INFO';\r\nexport const GET_USER_TOKEN = 'GET_USER_TOKEN';\r\nexport const LOG_OUT = 'LOG_OUT';\r\nexport const LOGIN_USER = 'LOGIN_USER';\r\n\r\n// brands\r\nexport const GET_BRAND = 'GET_BRAND';\r\n// favorite product\r\nexport const GET_FAVORITE = 'GET_FAVORITE';\r\n// \r\nexport const FILTER_PRODUCTS_BY_BRAND = 'FILTER_PRODUCTS_BY_BRAND';\r\nexport const FILTER_PRODUCTS_BY_COLOR = 'FILTER_PRODUCTS_BY_COLOR';","import React, { Component } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport \"./scss/style.scss\";\nimport \"./App.css\";\n\nconst TheLayout = React.lazy(() => import(\"./Components/TheLayout\"));\nconst loading = (\n  <div className=\"pt-3 text-center\">\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\n  </div>\n);\n\nvar hours = 24; // Reset when storage is more than\nvar now = new Date().getTime();\nvar setupTime = localStorage.getItem(\"setupTime\");\nif (setupTime == null) {\n  localStorage.setItem(\"setupTime\", now);\n} else {\n  if (now - setupTime > hours * 60 * 60 * 1000) {\n    localStorage.clear();\n    localStorage.setItem(\"setupTime\", now);\n  }\n}\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        {/* load component */}\n        <React.Suspense fallback={loading}>\n          <Switch>\n            <Route\n              path=\"/\"\n              name=\"Home\"\n              render={(props) => <TheLayout {...props} />}\n            />\n          </Switch>\n        </React.Suspense>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport store from './store/index'\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}